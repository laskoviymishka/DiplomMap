@model IEnumerable<Investmogilev.Infrastructure.Common.Model.Common.Region>
@{
    Dictionary<string, List<double>> allGrowth = new Dictionary<string, List<double>>();
    foreach (var item in Model)
    {
        foreach (var inner in item.Parametrs)
        {
            foreach (var child in inner.ChildParametrs)
            {
                double avgGrowth = 0.0;
                int count = 0;

                double growth = 0.0;
                for (int i = 1; i < child.Values.Count; i++)
                {
                    if (child.Values[i].Value != 0.0 && child.Values[i - 1].Value != 0.0)
                    {
                        growth += child.Values[i].Value / child.Values[i - 1].Value;
                        count++;
                    }
                }


                if (count != 0)
                {
                    avgGrowth = growth / count;
                }
                if (!allGrowth.ContainsKey(child.ParametrName))
                {
                    allGrowth.Add(child.ParametrName, new List<double>());
                }
                if (avgGrowth != 0.0)
                {
                    allGrowth[child.ParametrName].Add(avgGrowth);
                }
            }
        }
    }
}
<script src="//cdnjs.cloudflare.com/ajax/libs/jquery/2.1.0/jquery.min.js"></script>
<link href="/Scripts/fooTable/footable.metro.css" rel="stylesheet" />
<script src="/Scripts/fooTable/footable.js"></script>
<script src="/Scripts/fooTable/footable.sort.js"></script>
<script src="/Scripts/fooTable/footable.paginate.js"></script>
<link href="//netdna.bootstrapcdn.com/bootstrap/3.1.1/css/bootstrap.min.css" rel="stylesheet" type="text/css" />

<script>
    $(function () {
        $('.main-table').footable();
    });
</script>
<table id="main-table">
    <thead>
        <tr>
            <th>
                Регион
            </th>
            <th>
                Агрегирующий параметр
            </th>
            <th>
                Параметр
            </th>
            @for (int i = ViewBag.StartYear; i <= ViewBag.EndYear; i++)
            {
                <th>
                    @i год
                </th>
            }
            <th>
                Среднее
            </th>
            <th>
                Рост/Средний рост
            </th>
        </tr>
    </thead>
    <tbody>
        @foreach (var item in Model)
        {
            foreach (var inner in item.Parametrs)
            {
                foreach (var child in inner.ChildParametrs)
                {
                    <tr>
                        <td>
                            @Html.DisplayFor(modelItem => item.RegionName)
                        </td>
                        <td>
                            @Html.DisplayFor(modelItem => inner.ParametrName)
                        </td>
                        <td>
                            @Html.DisplayFor(modelItem => child.ParametrName)
                        </td>
                        @for (int i = ViewBag.StartYear; i <= ViewBag.EndYear; i++)
                        {
                            <th>
                                <p>@child.Values.FirstOrDefault(c => c.Key == i).Value</p>
                            </th>
                        }
                        @{
                        double avg = 0.0;
                        double avgGrowth = 0.0;
                        double sum = 0.0;
                        int count = 0;
                        foreach (var c in child.Values)
                        {
                            if (c.Value != 0.0)
                            {
                                sum += c.Value;
                                count++;
                            }
                        }

                        if (count != 0)
                        {
                            avg = sum / count;
                        }

                        double growth = 0.0;
                        count = 0;
                        for (int i = 1; i < child.Values.Count; i++)
                        {
                            if (child.Values[i].Value != 0.0 && child.Values[i - 1].Value != 0.0)
                            {
                                growth += child.Values[i].Value / child.Values[i - 1].Value;
                                count++;
                            }
                        }


                        if (count != 0)
                        {
                            avgGrowth = growth / count;
                        }
                        }
                        <th>
                            @avg.ToString("0.#")
                        </th>
                        @if (allGrowth[child.ParametrName].Average() > avgGrowth)
                        {
                            <th style="background-color: lightpink">
                                @avgGrowth.ToString("0.####") / @allGrowth[child.ParametrName].Average().ToString("0.####")
                            </th>
                        }
                        else
                        {
                            <th style="background-color: greenyellow">
                                @avgGrowth.ToString("0.####") / @allGrowth[child.ParametrName].Average().ToString("0.####")
                            </th>
                        }
                    </tr>
                }
            }
        }
    </tbody>
</table>
