// IMPORTANT: THIS IS MACHINE-GENERATED CODE
// PLEASE DO NOT EDIT
// Generated by Stateless Designer
// http://statelessdesigner.codeplex.com/

using Stateless;

namespace Invest.Common.State
{
  public class ProjectWorkflow
  {
    public delegate void UnhandledTriggerDelegate(State state, Trigger trigger);
    public delegate void EntryExitDelegate();
    public delegate bool GuardClauseDelegate();

    public enum Trigger
    {
      FillInformation,
      UpdateInformation,
      InvestorResponsed,
      InvestorSelected,
      InvestorActivate,
      UpdateReviewProgress,
      ComissionApprove,
      ReReview,
      ReInvestor,
      UpdateProgress,
      ReRealization,
      ReOpen,
    }

    public enum State
    {
      Open,
      OnMap,
      InvestorAprove,
      WaitForInvestor,
      OnReview,
      OnComission,
      Realization,
      Done,
    }

    private readonly StateMachine<State, Trigger> stateMachine = null;

    public EntryExitDelegate OnOpenEntry = null;
    public EntryExitDelegate OnOpenExit = null;
    public EntryExitDelegate OnOnMapEntry = null;
    public EntryExitDelegate OnOnMapExit = null;
    public EntryExitDelegate OnInvestorAproveEntry = null;
    public EntryExitDelegate OnInvestorAproveExit = null;
    public EntryExitDelegate OnWaitForInvestorEntry = null;
    public EntryExitDelegate OnWaitForInvestorExit = null;
    public EntryExitDelegate OnOnReviewEntry = null;
    public EntryExitDelegate OnOnReviewExit = null;
    public EntryExitDelegate OnOnComissionEntry = null;
    public EntryExitDelegate OnOnComissionExit = null;
    public EntryExitDelegate OnRealizationEntry = null;
    public EntryExitDelegate OnRealizationExit = null;
    public EntryExitDelegate OnDoneEntry = null;
    public EntryExitDelegate OnDoneExit = null;
    public GuardClauseDelegate GuardClauseFromOpenToOnMapUsingTriggerFillInformation = null;
    public GuardClauseDelegate GuardClauseFromOnMapToOnMapUsingTriggerUpdateInformation = null;
    public GuardClauseDelegate GuardClauseFromOnMapToInvestorAproveUsingTriggerInvestorResponsed = null;
    public GuardClauseDelegate GuardClauseFromOnMapToOpenUsingTriggerReOpen = null;
    public GuardClauseDelegate GuardClauseFromInvestorAproveToInvestorAproveUsingTriggerInvestorResponsed = null;
    public GuardClauseDelegate GuardClauseFromInvestorAproveToWaitForInvestorUsingTriggerInvestorSelected = null;
    public GuardClauseDelegate GuardClauseFromWaitForInvestorToOnReviewUsingTriggerInvestorActivate = null;
    public GuardClauseDelegate GuardClauseFromWaitForInvestorToOnMapUsingTriggerReInvestor = null;
    public GuardClauseDelegate GuardClauseFromOnReviewToOnComissionUsingTriggerUpdateReviewProgress = null;
    public GuardClauseDelegate GuardClauseFromOnReviewToOnReviewUsingTriggerUpdateReviewProgress = null;
    public GuardClauseDelegate GuardClauseFromOnReviewToOnMapUsingTriggerReInvestor = null;
    public GuardClauseDelegate GuardClauseFromOnComissionToRealizationUsingTriggerComissionApprove = null;
    public GuardClauseDelegate GuardClauseFromOnComissionToOnReviewUsingTriggerReReview = null;
    public GuardClauseDelegate GuardClauseFromOnComissionToOnMapUsingTriggerReInvestor = null;
    public GuardClauseDelegate GuardClauseFromRealizationToOnReviewUsingTriggerReReview = null;
    public GuardClauseDelegate GuardClauseFromRealizationToRealizationUsingTriggerUpdateProgress = null;
    public GuardClauseDelegate GuardClauseFromRealizationToDoneUsingTriggerUpdateProgress = null;
    public GuardClauseDelegate GuardClauseFromDoneToRealizationUsingTriggerReRealization = null;
    public GuardClauseDelegate GuardClauseFromDoneToOnMapUsingTriggerReInvestor = null;
    public GuardClauseDelegate GuardClauseFromDoneToOnReviewUsingTriggerReReview = null;
    public GuardClauseDelegate GuardClauseFromDoneToOpenUsingTriggerReOpen = null;
    public UnhandledTriggerDelegate OnUnhandledTrigger = null;

    public ProjectWorkflow()
    {
      stateMachine = new StateMachine<State, Trigger>(State.Open);
      stateMachine.Configure(State.Open)
        .OnEntry(() => { if (OnOpenEntry != null) OnOpenEntry(); })
        .OnExit(() => { if (OnOpenExit != null) OnOpenExit(); })
        .PermitIf(Trigger.FillInformation, State.OnMap , () => { if (GuardClauseFromOpenToOnMapUsingTriggerFillInformation != null) return GuardClauseFromOpenToOnMapUsingTriggerFillInformation(); return true; } )
      ;
      stateMachine.Configure(State.OnMap)
        .OnEntry(() => { if (OnOnMapEntry != null) OnOnMapEntry(); })
        .OnExit(() => { if (OnOnMapExit != null) OnOnMapExit(); })
        .PermitReentryIf(Trigger.UpdateInformation , () => { if (GuardClauseFromOnMapToOnMapUsingTriggerUpdateInformation != null) return GuardClauseFromOnMapToOnMapUsingTriggerUpdateInformation(); return true; } )
        .PermitIf(Trigger.InvestorResponsed, State.InvestorAprove , () => { if (GuardClauseFromOnMapToInvestorAproveUsingTriggerInvestorResponsed != null) return GuardClauseFromOnMapToInvestorAproveUsingTriggerInvestorResponsed(); return true; } )
        .PermitIf(Trigger.ReOpen, State.Open , () => { if (GuardClauseFromOnMapToOpenUsingTriggerReOpen != null) return GuardClauseFromOnMapToOpenUsingTriggerReOpen(); return true; } )
      ;
      stateMachine.Configure(State.InvestorAprove)
        .OnEntry(() => { if (OnInvestorAproveEntry != null) OnInvestorAproveEntry(); })
        .OnExit(() => { if (OnInvestorAproveExit != null) OnInvestorAproveExit(); })
        .PermitReentryIf(Trigger.InvestorResponsed , () => { if (GuardClauseFromInvestorAproveToInvestorAproveUsingTriggerInvestorResponsed != null) return GuardClauseFromInvestorAproveToInvestorAproveUsingTriggerInvestorResponsed(); return true; } )
        .PermitIf(Trigger.InvestorSelected, State.WaitForInvestor , () => { if (GuardClauseFromInvestorAproveToWaitForInvestorUsingTriggerInvestorSelected != null) return GuardClauseFromInvestorAproveToWaitForInvestorUsingTriggerInvestorSelected(); return true; } )
      ;
      stateMachine.Configure(State.WaitForInvestor)
        .OnEntry(() => { if (OnWaitForInvestorEntry != null) OnWaitForInvestorEntry(); })
        .OnExit(() => { if (OnWaitForInvestorExit != null) OnWaitForInvestorExit(); })
        .PermitIf(Trigger.InvestorActivate, State.OnReview , () => { if (GuardClauseFromWaitForInvestorToOnReviewUsingTriggerInvestorActivate != null) return GuardClauseFromWaitForInvestorToOnReviewUsingTriggerInvestorActivate(); return true; } )
        .PermitIf(Trigger.ReInvestor, State.OnMap , () => { if (GuardClauseFromWaitForInvestorToOnMapUsingTriggerReInvestor != null) return GuardClauseFromWaitForInvestorToOnMapUsingTriggerReInvestor(); return true; } )
      ;
      stateMachine.Configure(State.OnReview)
        .OnEntry(() => { if (OnOnReviewEntry != null) OnOnReviewEntry(); })
        .OnExit(() => { if (OnOnReviewExit != null) OnOnReviewExit(); })
        .PermitIf(Trigger.UpdateReviewProgress, State.OnComission , () => { if (GuardClauseFromOnReviewToOnComissionUsingTriggerUpdateReviewProgress != null) return GuardClauseFromOnReviewToOnComissionUsingTriggerUpdateReviewProgress(); return true; } )
        .PermitReentryIf(Trigger.UpdateReviewProgress , () => { if (GuardClauseFromOnReviewToOnReviewUsingTriggerUpdateReviewProgress != null) return GuardClauseFromOnReviewToOnReviewUsingTriggerUpdateReviewProgress(); return true; } )
        .PermitIf(Trigger.ReInvestor, State.OnMap , () => { if (GuardClauseFromOnReviewToOnMapUsingTriggerReInvestor != null) return GuardClauseFromOnReviewToOnMapUsingTriggerReInvestor(); return true; } )
      ;
      stateMachine.Configure(State.OnComission)
        .OnEntry(() => { if (OnOnComissionEntry != null) OnOnComissionEntry(); })
        .OnExit(() => { if (OnOnComissionExit != null) OnOnComissionExit(); })
        .PermitIf(Trigger.ComissionApprove, State.Realization , () => { if (GuardClauseFromOnComissionToRealizationUsingTriggerComissionApprove != null) return GuardClauseFromOnComissionToRealizationUsingTriggerComissionApprove(); return true; } )
        .PermitIf(Trigger.ReReview, State.OnReview , () => { if (GuardClauseFromOnComissionToOnReviewUsingTriggerReReview != null) return GuardClauseFromOnComissionToOnReviewUsingTriggerReReview(); return true; } )
        .PermitIf(Trigger.ReInvestor, State.OnMap , () => { if (GuardClauseFromOnComissionToOnMapUsingTriggerReInvestor != null) return GuardClauseFromOnComissionToOnMapUsingTriggerReInvestor(); return true; } )
      ;
      stateMachine.Configure(State.Realization)
        .OnEntry(() => { if (OnRealizationEntry != null) OnRealizationEntry(); })
        .OnExit(() => { if (OnRealizationExit != null) OnRealizationExit(); })
        .PermitIf(Trigger.ReReview, State.OnReview , () => { if (GuardClauseFromRealizationToOnReviewUsingTriggerReReview != null) return GuardClauseFromRealizationToOnReviewUsingTriggerReReview(); return true; } )
        .PermitReentryIf(Trigger.UpdateProgress , () => { if (GuardClauseFromRealizationToRealizationUsingTriggerUpdateProgress != null) return GuardClauseFromRealizationToRealizationUsingTriggerUpdateProgress(); return true; } )
        .PermitIf(Trigger.UpdateProgress, State.Done , () => { if (GuardClauseFromRealizationToDoneUsingTriggerUpdateProgress != null) return GuardClauseFromRealizationToDoneUsingTriggerUpdateProgress(); return true; } )
      ;
      stateMachine.Configure(State.Done)
        .OnEntry(() => { if (OnDoneEntry != null) OnDoneEntry(); })
        .OnExit(() => { if (OnDoneExit != null) OnDoneExit(); })
        .PermitIf(Trigger.ReRealization, State.Realization , () => { if (GuardClauseFromDoneToRealizationUsingTriggerReRealization != null) return GuardClauseFromDoneToRealizationUsingTriggerReRealization(); return true; } )
        .PermitIf(Trigger.ReInvestor, State.OnMap , () => { if (GuardClauseFromDoneToOnMapUsingTriggerReInvestor != null) return GuardClauseFromDoneToOnMapUsingTriggerReInvestor(); return true; } )
        .PermitIf(Trigger.ReReview, State.OnReview , () => { if (GuardClauseFromDoneToOnReviewUsingTriggerReReview != null) return GuardClauseFromDoneToOnReviewUsingTriggerReReview(); return true; } )
        .PermitIf(Trigger.ReOpen, State.Open , () => { if (GuardClauseFromDoneToOpenUsingTriggerReOpen != null) return GuardClauseFromDoneToOpenUsingTriggerReOpen(); return true; } )
      ;
      stateMachine.OnUnhandledTrigger((state, trigger) => { if (OnUnhandledTrigger != null) OnUnhandledTrigger(state, trigger); });
    }

    public bool TryFireTrigger(Trigger trigger)
    {
      if (!stateMachine.CanFire(trigger))
      {
        return false;
      }
      stateMachine.Fire(trigger);
      return true;
    }

    public State GetState
    {
      get
      {
        return stateMachine.State;
      }
    }
  }
}